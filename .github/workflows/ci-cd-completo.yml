name: CI/CD Pipeline Completo - Docker + Render

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: samiracavalcanti/devops-projeto03

jobs:
  # ===== CI: Continuous Integration =====
  test:
    name: 🧪 Testes e Validação
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Executar testes
      run: |
        python -c "import app; print('✅ App importado com sucesso!')"
        python -c "from app import app; print('✅ Flask app criado com sucesso!')"

    - name: Testar Dockerfile
      run: |
        docker build -t test-image .
        echo "✅ Docker build executado com sucesso!"

  # ===== CD: Continuous Deployment =====
  build-and-deploy:
    name: 🚀 Build e Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=main-
          type=raw,value=latest

    - name: Build e Push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Trigger deploy no Render
      run: |
        echo "🚀 Imagem Docker publicada:"
        echo "📦 ${{ steps.meta.outputs.tags }}"
        echo "🌐 Render fará pull da nova imagem automaticamente"
        echo "✅ Deploy completado!"

  # ===== Notificações =====
  notify:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [test, build-and-deploy]
    if: always()
    
    steps:
    - name: Status do Pipeline
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "🎉 CI/CD Pipeline executado com SUCESSO!"
          echo "✅ Testes: OK"
          echo "✅ Build: OK" 
          echo "✅ Deploy: OK"
        else
          echo "❌ Pipeline FALHOU em alguma etapa"
          echo "🧪 Testes: ${{ needs.test.result }}"
          echo "🚀 Deploy: ${{ needs.build-and-deploy.result }}"
        fi
