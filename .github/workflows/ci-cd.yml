name: CI/CD Pipeline - Docker + Render

# Gatilho: Disparar o workflow em cada push para a branch 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: samiracavalcanti/devops-projeto03

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Puxar o código do repositório
    - name: Checkout do código
      uses: actions/checkout@v4

    # 2. Configurar Python
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # 3. Instalar dependências
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 4. Executar testes da aplicação
    - name: Executar testes
      run: |
        echo "🧪 Testando importação da aplicação..."
        python -c "import app; print('✅ App importado com sucesso!')"
        python -c "from app import app; print('✅ Flask app criado com sucesso!')"
        
        echo "🧪 Executando testes unitários..."
        python test_app.py
        
        echo "🧪 Testando endpoints principais..."
        python -c "from app import app; client = app.test_client(); response = client.get('/health'); assert response.status_code == 200; print('✅ Health check OK!')"
        python -c "from app import app; client = app.test_client(); response = client.get('/status'); assert response.status_code == 200; print('✅ Status endpoint OK!')"
        python -c "from app import app; client = app.test_client(); response = client.get('/'); assert response.status_code == 200; print('✅ Home page OK!')"

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=main-
          type=raw,value=latest

    - name: Build e Push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build-and-push]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy para Render
      run: |
        echo "🚀 Deploy automático para Render"
        echo "📦 Imagem Docker: ${{ env.IMAGE_NAME }}:latest"
        echo "🌐 Render detectará automaticamente as mudanças no GitHub"
        echo "✅ Pipeline CI/CD executado com sucesso!"
       

